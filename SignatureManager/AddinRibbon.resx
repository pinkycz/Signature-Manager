<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="but_settings.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>